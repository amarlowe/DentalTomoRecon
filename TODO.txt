TomoRecon

-------------Features------------------
- File system that saves calbiration data system independently
- Fix readGainAndDarkimages
- Remove magic numbers and filepaths
- Implement cjson struct building
- Save and load json files based on user input
- Switch between inputs in form using tab and/or enter
- Confirm cancel or load when values have been edited
- Check values for input before allowing running, prompt a visit to config
- Implement a visualizer on a per project basis
- output console output to status bar, include a progress meter
- Implement start page in main window with instructions
- New prompts for opening of raw files, processes and displays
- Open opens a render, not the raw files (used for self comparisons)
- Init openGl on program launch for minor speedups in first tab open
- Make MAC compiltible (hopefully not)
- Save configuration settings on project file/directory instead of registry to make them project specific
- "Set default" options for configuration and any other setting we can come up with
- Replace each failure state with it's own error type and dialoag (or pass a string)
- Inefficienicies in initial load and correction, can remove the final blur step and blurxy array
- Recon norm has essentially uniform values across the entire image, consider killing to save memory (incorrect value was being read from it in the past)
- Evaluate need to iterate through captures instead of all at once
- Look at the lighting change from the first to others

--------------Bugs---------------------
- Number of Slices to Reconstruct too large may crash program
- texture memory accesses are not locally spaced, they're scattered
- image edges given tails that are not explicitly dealt with
- index out of bounds and other conditions set array values to an explicit -10
- color inversion on low z layer counts
- additional lines included on increasing z size
- debug mode causes a crash and failure (problem likely persists in release, it just gets ignored)
- wxwidget drag draws artifacts on the wrong screen
- when reading in files, it will attempt to read .dicom files along with the raw files and cause errors
- Throw all tomo errors instead of crashing the program
- Program crashes after returning error in reconstruction
- interop only supports a single buffer, code exits for any number, but swapping buffers fails (may not be necessary, already need to swap the main buffer)
- creating two instances works, fails after closing one. More cleanup is required
- Making the viewport too small crashes opengl-line 110 (cudagraphicsresource has minimum size?)
- Loading more than 2 projections causes odd bugs
- replaced "40,000.0" with USHRT_MAX in correct projections. I think that's what he was going for, unsure
- TONS of magic numbers left scrambled around the CUDA code
- Program locks up when button is pressed when the last frame is selected
- Check normalization code, some images are completely black while others look just fine